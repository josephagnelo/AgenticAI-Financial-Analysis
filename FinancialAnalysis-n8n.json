{
  "name": "Financial Analysis",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "62f0608c-5215-40df-b1ad-13fc02572fe6",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "app5omFGJlBiyfjD2",
          "mode": "list",
          "cachedResultName": "Products_Data",
          "cachedResultUrl": "https://airtable.com/app5omFGJlBiyfjD2"
        },
        "table": {
          "__rl": true,
          "value": "tblFpKfEOlAY6lfsE",
          "mode": "list"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        208,
        0
      ],
      "id": "73a11b2e-c1e0-47d1-a6b2-05401b3097ef",
      "name": "Search records",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "EXKZGTkDmtwJS09q",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ✅ Process all Airtable records into a clean JSON array\nconst cleanedData = $input.all().map(item => {\n  const record = item.json;\n\n  return {\n    id: record.id,\n    cost: parseFloat(record.cost),\n    category: record.category,\n    name: record.name,\n    brand: record.brand,\n    retail_price: parseFloat(record.retail_price),\n    profit_margin: parseFloat(record.retail_price) - parseFloat(record.cost),\n    department: record.department,\n    sku: record.sku,\n    distribution_center_id: record.distribution_center_id\n  };\n});\n\n// ✅ Return a single item with the array inside `records`\nreturn [\n  {\n    json: {\n      records: cleanedData\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "a898bfb5-ed4d-465f-a101-c4e18f4641e6",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a meticulous product data analyst. Please analyze this exact product catalog data and create a structured, data-driven report with deeper insights.\n\nThe dataset contains 521 products**.\n\nHere is the detailed product dataset:\n\n{{ $json.records.map((item, index) => `${index + 1}. ${item.name}\n- Category: ${item.category}\n- Department: ${item.department}\n- Brand: ${item.brand}\n- SKU: ${item.sku}\n- Cost: $${item.cost}\n- Retail Price: $${item.retail_price}\n- Profit Margin: $${(item.retail_price - item.cost).toFixed(2)}`).join('\\n\\n') }}\n\n---\n\n### Please use this **exact structure** for your response:\n\n1. **Executive Summary**\n   - Provide 2–3 high-level findings about pricing, margins, or trends.\n   - Mention any interesting overall pattern in the dataset.\n\n2. **Key Metrics**\n   - Total number of products\n   - Average profit margin (calculate it)\n   - Highest and lowest profit margin\n\n3. **Top Brands**\n   - List top 3 brands by number of products\n   - Provide counts for each\n\n4. **Retail Pricing by Category**\n   - Category with highest average retail price\n   - Category with lowest average retail price\n\n5. **Profit Margins by Department**\n   - Department with highest average profit margin\n   - Department with lowest average profit margin\n\n6. **Outlier Products**\n   - Identify 3 products with **very high** profit margins\n   - Identify 3 products with **very low** or negative margins\n\nUse **bullet points or tables** where appropriate.\nEnsure insights are easy to follow. **Store the entire dataset in memory** for follow-up queries.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        0
      ],
      "id": "fa1909bf-7eb8-4fcc-9b95-46b685dcc7f5",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        464,
        224
      ],
      "id": "4507bb23-acc5-4fb4-a512-d1ddebfa2ecd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "6AvkRHW8885GQfav",
          "name": "n8n OpenAI Key"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an AI report formatter. Convert the following plain-text report into a professionally formatted HTML email.\n\nRequirements:\n- Start with: \"Hey Everyone<br><br>Good morning! Hope you had an amazing weekend.<br>Sharing the weekly report for the last whole week.\"\n- Use <h2> or <h3> for section headers.\n- Use <strong> for key labels and values.\n- Use <p> for paragraphs and <ul>/<ol> for lists where appropriate.\n- Use tables (<table>, <tr>, <th>, <td>) for structured data like brand counts or metrics.\n- Highlight important metrics using <blockquote> or <div> with subtle styling.\n- At the end, include this signature:\n\n  <br><br>Thanks,<br>Regards,<br><strong>Utkarsh</strong><br>Product Manager<br>InterviewKickstart\n\n- End with this note, in bold:\n\n  <br><br><strong>Note:</strong> Also just mention this report is generated for demo purposes via Automated workflow on n8n Low/ No Code Tool.\n\nDo not include ```html or triple backticks anywhere. The output should be a valid HTML snippet that can be pasted into an n8n email node.\n\nHere is the content to format:\n{{ $json.output }} \n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        976,
        0
      ],
      "id": "c3432c57-545e-4b1c-aa7e-0da976be5212",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "6AvkRHW8885GQfav",
          "name": "n8n OpenAI Key"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "josephagnelo@gmail.com",
        "subject": "Weekly Report - Agentic AI",
        "message": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1328,
        0
      ],
      "id": "070fcda1-c8e5-4a6d-ab4c-be90b1967a77",
      "name": "Send a message",
      "webhookId": "a2fe037c-09f2-484f-a87b-3e8a84555b5a",
      "credentials": {
        "gmailOAuth2": {
          "id": "meoTJOOQBdej69u6",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search records": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "387751bb-19dd-4510-ab38-aa8be4630086",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "acc47a65ff841b9afabcea1f1f03d7f3e92bfe726515d78267dba68f60c464d8"
  },
  "id": "XWoQb5UIHlDM3bv6",
  "tags": []
}
